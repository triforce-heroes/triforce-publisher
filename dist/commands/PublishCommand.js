import{existsSync as e,readFileSync as s,writeFileSync as t}from"node:fs";import{DDBBatchWrite as n,DDBGetItem as r}from"@triforce-heroes/triforce-core/AWS/DDB";import{DDBQueryBuilder as o}from"@triforce-heroes/triforce-core/AWS/DDBQueryBuilder";import{fatal as i}from"@triforce-heroes/triforce-core/Console";import{deepEqual as u}from"fast-equals";import{weakLocalesFull as l}from"../utils/locale.js";export async function PublishCommand(a,c){e("./publishable.json")||i("No publishable.ts found"),process.stdout.write("Reading publishable entries... ");let p=JSON.parse(s("./publishable.json","utf8"));process.stdout.write("OK\n"),c.dryRun||null!==await r("tapp_engines","engine",a)||i(`Engine not found: ${a}`);let d=new o("tapp_entries","engine",a),f=new Map((await d.get()).map(e=>[e.index,e])),g=[],h=[],m=new o("tapp_sources","engine",a);m.pushProjections("index","sources","translations");let b=new Map((await m.get()).map(e=>[e.index,e])),x=[],w=[],S=new Map,O=new Map;for(let e of p){let s=f.get(e.index),t=JSON.stringify(Object.fromEntries(Object.entries(e.sources).flatMap(([e,s])=>{let t=e.split(",").filter(e=>!l.includes(e));return 0===t.length?[]:[[t.sort().join(","),s]]}))),n=S.get(t);void 0===n&&S.set(t,e.index);let r=JSON.stringify({...e.sources}),o=O.get(r);void 0===o&&O.set(r,e.index);let i=void 0!==o||n!==o,c={engine:a,index:e.index,reference:e.reference,resource:e.resource,...s,...void 0===e.context?{}:{context:e.context},...i||void 0===e.sourceIndex?{}:{source:e.sourceIndex},...i||void 0===e.translationIndex?{}:{translation:e.translationIndex},...void 0===n?{}:{same:n},...void 0!==o&&n!==o?{sameSources:o}:{}};h.push(c),(void 0===s||s.reference!==c.reference||s.resource!==c.resource||s.context!==c.context||s.source!==c.source||s.same!==c.same||s.sameSources!==c.sameSources)&&g.push(c);let p=b.get(e.index),d={engine:a,index:e.index,sources:e.sources,translations:e.translations};void 0!==o||(w.push(d),void 0!==p&&u(p.sources,d.sources)&&u(p.translations,d.translations)||x.push(d))}t("./publishable-entries-last.json",JSON.stringify(g,null,2)),t("./publishable-entries.json",JSON.stringify(h,null,2)),c.dryRun||(process.stdout.write(`Publishing entries (${String(g.length)} of ${String(h.length)})... `),await n("tapp_entries",c.testRun?g.slice(0,25):g),process.stdout.write("OK\n")),t("./publishable-sources-last.json",JSON.stringify(x,null,2)),t("./publishable-sources.json",JSON.stringify(w,null,2)),c.dryRun||(process.stdout.write(`Publishing sources (${String(x.length)} of ${String(w.length)})... `),await n("tapp_sources",c.testRun?x.slice(0,25):x),process.stdout.write("OK\n")),process.stdout.write("\nDONE!\n")}