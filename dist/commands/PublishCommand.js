import{existsSync as e,readFileSync as s,writeFileSync as t}from"node:fs";import{DDBBatchWrite as r,DDBGetItem as n}from"@triforce-heroes/triforce-core/AWS/DDB";import{DDBQueryBuilder as o}from"@triforce-heroes/triforce-core/AWS/DDBQueryBuilder";import{fatal as i}from"@triforce-heroes/triforce-core/Console";import{deepEqual as u}from"fast-equals";import{weakLocalesFull as a}from"../utils/locale.js";export async function PublishCommand(c,l){e("./publishable.json")||i("No publishable.ts found"),process.stdout.write("Reading publishable entries... ");let p=JSON.parse(s("./publishable.json","utf8"));process.stdout.write("OK\n"),l?.dryRun!==!0&&null===await n("tapp_engines","engine",c)&&i(`Engine not found: ${c}`);let d=new o("tapp_entries","engine",c),f=new Map((await d.get()).map(e=>[e.index,e])),g=[],m=[],h=new o("tapp_sources","engine",c);h.pushProjections("index","sources","translations");let x=new Map((await h.get()).map(e=>[e.index,e])),w=[],b=[],S=new Map,v=new Map;for(let e of p){let s=f.get(e.index),t=JSON.stringify(Object.fromEntries(Object.entries(e.sources).flatMap(([e,s])=>{let t=e.split(",").filter(e=>!a.includes(e));return 0===t.length?[]:[[t.sort().join(","),s]]}))),r=S.get(t);void 0===r&&S.set(t,e.index);let n=JSON.stringify({...e.sources}),o=v.get(n);void 0===o&&v.set(n,e.index);let i=void 0!==o||r!==o,l={engine:c,index:e.index,reference:e.reference,resource:e.resource,...s,...void 0===e.context?{}:{context:e.context},...i||void 0===e.sourceIndex?{}:{source:e.sourceIndex},...i||void 0===e.translationIndex?{}:{translation:e.translationIndex},...void 0===r?{}:{same:r},...void 0!==o&&r!==o?{sameSources:o}:{}};m.push(l),(void 0===s||s.reference!==l.reference||s.resource!==l.resource||s.context!==l.context||s.source!==l.source||s.same!==l.same||s.sameSources!==l.sameSources)&&g.push(l);let p=x.get(e.index),d={engine:c,index:e.index,sources:e.sources,translations:e.translations};void 0!==o||(b.push(d),void 0!==p&&u(p.sources,d.sources)&&u(p.translations,d.translations)||w.push(d))}t("./publishable-entries.json",JSON.stringify(m,null,2)),l?.dryRun!==!0&&(process.stdout.write(`Publishing entries (${String(g.length)} of ${String(m.length)})... `),await r("tapp_entries",g),process.stdout.write("OK\n")),t("./publishable-sources.json",JSON.stringify(b,null,2)),l?.dryRun!==!0&&(process.stdout.write(`Publishing sources (${String(w.length)} of ${String(b.length)})... `),await r("tapp_sources",w),process.stdout.write("OK\n")),process.stdout.write("\nDONE!\n")}