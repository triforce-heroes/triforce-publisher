import{existsSync as e,readFileSync as r}from"node:fs";import{DDBBatchWrite as o,DDBGetItem as s}from"@triforce-heroes/triforce-core/AWS/DDB";import{DDBQueryBuilder as t}from"@triforce-heroes/triforce-core/AWS/DDBQueryBuilder";import{fatal as n}from"@triforce-heroes/triforce-core/Console";import{deepEqual as i}from"fast-equals";export async function PublishCommand(c){e("./publishable.json")||n("No publishable.ts found"),process.stdout.write("Reading publishable entries... ");let a=JSON.parse(r("./publishable.json","utf8"));process.stdout.write("OK\n"),null===await s("tapp_engines","engine",c)&&n(`Engine not found: ${c}`);let u=new t("tapp_entries","engine",c);u.pushProjections("index","reference","resource","context","source");let p=new Map((await u.get()).map(e=>[e.index,e])),l=[],d=new t("tapp_sources","engine",c);d.pushProjections("index","sources","translations");let f=new Map((await d.get()).map(e=>[e.index,e])),x=[];for(let e of a){let r=p.get(e.index);(void 0===r||r.reference!==e.reference||r.resource!==e.resource||r.source!==e.sourceIndex)&&l.push({engine:c,index:e.index,reference:e.reference,resource:e.resource,...void 0===e.context?{}:{context:e.context},...void 0===e.sourceIndex?{}:{source:e.sourceIndex},...void 0===e.translationIndex?{}:{translation:e.translationIndex}});let o=f.get(e.index);void 0!==o&&i(o.sources,e.sources)&&i(o.translations,e.translations)||x.push({engine:c,index:e.index,sources:e.sources,translations:e.translations})}process.stdout.write(`Publishing entries (${l.length})... `),await o("tapp_entries",l),process.stdout.write("OK\n"),process.stdout.write(`Publishing sources (${x.length})... `),await o("tapp_sources",x),process.stdout.write("OK\n")}