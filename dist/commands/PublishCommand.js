import{existsSync as e,readFileSync as s,writeFileSync as t}from"node:fs";import{DDBBatchWrite as r,DDBGetItem as o}from"@triforce-heroes/triforce-core/AWS/DDB";import{DDBQueryBuilder as n}from"@triforce-heroes/triforce-core/AWS/DDBQueryBuilder";import{fatal as i}from"@triforce-heroes/triforce-core/Console";import{deepEqual as a}from"fast-equals";import{weakLocales as u}from"../utils/locale.js";export async function PublishCommand(c){e("./publishable.json")||i("No publishable.ts found"),process.stdout.write("Reading publishable entries... ");let l=JSON.parse(s("./publishable.json","utf8"));process.stdout.write("OK\n"),null===await o("tapp_engines","engine",c)&&i(`Engine not found: ${c}`);let p=new n("tapp_entries","engine",c),d=new Map((await p.get()).map(e=>[e.index,e])),f=[],g=[],m=new n("tapp_sources","engine",c);m.pushProjections("index","sources","translations");let h=new Map((await m.get()).map(e=>[e.index,e])),x=[],b=[],w=new Map,S=new Map;for(let e of l){let s=d.get(e.index),t=JSON.stringify(Object.fromEntries(Object.entries(e.sources).flatMap(([e,s])=>{let t=e.split(",").filter(e=>!u.includes(e));return 0===t.length?[]:[[t.sort().join(","),s]]}))),r=w.get(t);void 0===r&&w.set(t,e.index);let o=JSON.stringify({...e.sources}),n=S.get(o);void 0===n&&S.set(o,e.index);let i=void 0!==n||r!==n,l={engine:c,index:e.index,reference:e.reference,resource:e.resource,...s,...void 0===e.context?{}:{context:e.context},...i||void 0===e.sourceIndex?{}:{source:e.sourceIndex},...i||void 0===e.translationIndex?{}:{translation:e.translationIndex},...void 0===r?{}:{same:r},...void 0!==n&&r!==n?{sameSources:n}:{}};g.push(l),(void 0===s||s.reference!==l.reference||s.resource!==l.resource||s.context!==l.context||s.source!==l.source||s.same!==l.same||s.sameSources!==l.sameSources)&&f.push(l);let p=h.get(e.index),m={engine:c,index:e.index,sources:e.sources,translations:e.translations};void 0!==n||(b.push(m),void 0!==p&&a(p.sources,m.sources)&&a(p.translations,m.translations)||x.push(m))}process.stdout.write(`Publishing entries (${String(f.length)} of ${String(g.length)})... `),t("./publishable-entries.json",JSON.stringify(g,null,2)),await r("tapp_entries",f),process.stdout.write("OK\n"),process.stdout.write(`Publishing sources (${String(x.length)} of ${String(b.length)})... `),t("./publishable-sources.json",JSON.stringify(b,null,2)),await r("tapp_sources",x),process.stdout.write("OK\n")}