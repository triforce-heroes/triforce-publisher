import{existsSync as e,readFileSync as t,writeFileSync as r}from"node:fs";import{fatal as s}from"@triforce-heroes/triforce-core/Console";import{secureHash as n}from"@triforce-heroes/triforce-core/Hash";import o from"chalk";import l from"p-queue";import{loadEngineDriver as a}from"../drivers/index.js";import{getEntryKey as i}from"../utils/entry.js";import{translate as f}from"../utils/google.js";import{guessLocale as u,simplifyLocales as c,weakLocales as d}from"../utils/locale.js";import{printProgress as p}from"../utils/progress.js";import{delay as g}from"../utils/utils.js";function m(r){return e(`./${r}/entries_default.json`)?JSON.parse(t(`./${r}/entries_default.json`,"utf8")):e(`./entries_${r}.json`)?JSON.parse(t(`./entries_${r}.json`,"utf8")):void s(`No entries.json found in ${r}`)}function h(e){return Object.fromEntries([...e.entries()].map(([e,t])=>[c(t).join(","),e]))}class w{constructor(e,t,r){this.name=e,this.toTranslator=t,this.fromTranslator=r}}class v extends w{constructor(){super("drop",e=>j(e,()=>" ").trim(),e=>e)}}function j(e,t){return e.replaceAll(/<(\d+)>/g,(e,r)=>t(Number(r)))}function $(e,t){return`<${t}>`}let x=[new w("default",e=>j(e,e=>` <${String(e)}> `),e=>e.replaceAll(/\s*<\s*(\d+)\s*>\s*/g,$)),new w("hashtag",e=>j(e,e=>` #${String(e)} `),e=>e.replaceAll(/\s*(?:#|n\s*ยบ)\s*(\d+)\s*/g,$)),new w("percent",e=>j(e,e=>` (${String(e)}%) `),e=>e.replaceAll(/\s*\(\s*(\d+)\s*%\s*\)\s*/g,$)),new w("brackets",e=>j(e,e=>` [${String(e)}] `),e=>e.replaceAll(/\s*\[\s*(\d+)\s*\]\s*/g,$)),new w("double arrows",e=>j(e,e=>` <<${String(e)}>> `),e=>e.replaceAll(/\s*<\s*<\s*(\d+)\s*>\s*>\s*/g,$)),new w("hr id",e=>j(e,e=>` <hr id="${String(e)}" /> `),e=>e.replaceAll(/\s*<hr\s*id\s*=\s*"\s*(\d+)\s*"\s*\/\s*>\s*/g,$)),new v];function S(e){return[...e.matchAll(/<(\d+)>/g)].map(e=>Number(e[1]))}export async function CompileCommand(c,w,j){let $=a(c);void 0===$&&s(`Unsupported engine driver: ${c}`);let I=w.split(" ");if(0===I.length&&s("No languages specified"),j?.translate!==void 0)for(let e of I)void 0===u(e)&&s(`Invalid source language: ${j.translate}`);let b=new Map;for(let e of I){let t=u(e);void 0===t&&s(`Unsupported language: ${e}`),b.set(e,t)}let N=new Map;for await(let[s,n]of b.entries()){let a=m(s);if(j?.translate===void 0)N.set(n,new Map(a.map(e=>[i(e),[e.source]])));else{let u,c;process.stdout.write(`Translating from ${s} as ${n}...

`);let m=`./cached-translations.${n}.json`,h=new Map(e(m)?JSON.parse(t(m,"utf8")):[]),w=0,I=setInterval(()=>{u!==c&&(c=u,p(w,a.length,c))},1e3);function O(){process.stdout.write(o.greenBright("  CACHE SAVED\n\n")),r(m,JSON.stringify([...h.entries()],null,2))}let b=setInterval(O,6e4);p(0,a.length);let A=new l({concurrency:j.concurrences});for(let e of a)A.add(async()=>{let t=$.parse(e.source),r=t.toCompressed(),s=r.toText(),o=null;if(h.has(s))o=h.get(s);else{let e=S(s);e:for(let t=0;t<3;t++)for(let r of x){if(r instanceof v){o=null;break e}try{o=await f(n,j.translate,r.toTranslator(s),j.cookieId)}catch{await g(1e3*t);continue e}if(e.length>0&&JSON.stringify(e)!==JSON.stringify(S(r.fromTranslator(o)))){if(d.includes(n))break e;continue}o=r.fromTranslator(o),h.set(s,o);break e}}w++,e.translation=r.fromCompressed(o??"",t),e.translationIndex=$.parse(e.translation).toIndex(),u={from:t.toIndex(),to:e.translationIndex}});await A.onIdle(),clearInterval(b),O(),clearInterval(I),p(a.length,a.length),N.set(s,new Map(a.map(e=>[i(e),[e.source,e.translation,e.translationIndex]])))}}process.stdout.write("Preparing publishables... ");let A=[];for await(let e of m(I.at(0)).values()){let t=i(e),r=new Map,s=new Map;for(let e of b.values()){let n=N.get(e);if(void 0===n)continue;let[o,l]=n.get(t);r.has(o)?r.get(o).push(e):r.set(o,[e]),j?.translate!==void 0&&(s.has(l)?s.get(l).push(e):s.set(l,[e]))}let o=N.get(I.at(0))?.get(t)?.[2],l={index:await n(Buffer.from(t)),resource:e.resource,reference:e.reference,...void 0!==e.context&&{context:e.context},sourceIndex:e.sourceIndex,...j?.translate!==void 0&&void 0!==o&&{translationIndex:o},sources:h(r),...j?.translate!==void 0&&{translations:h(s)}};A.push(l)}if(j?.uniques){let e=new Set;for(let t of A)for(let r of Object.values(t.sources))e.add(r);r("./uniques.json",JSON.stringify([...e],null,2))}if(j?.letters){let e=new Set;for(let t of A)for(let r of Object.values(t.sources))for(let t of r)e.add(t);r("./letters.txt",[...e].map(e=>e.codePointAt(0)).sort((e,t)=>e-t).join(","))}r("./publishable.json",JSON.stringify(A,null,2)),process.stdout.write("OK")}