import{existsSync as e,readFileSync as t,writeFileSync as o}from"node:fs";import{fatal as n}from"@triforce-heroes/triforce-core/Console";import{getEntryKey as r}from"../utils/entry.js";import{guessLocale as s,simplifyLocales as i}from"../utils/locale.js";function l(e){return JSON.parse(t(`./${e}/entries.json`,"utf8"))}function a(e){return Object.fromEntries([...e.entries()].map(([e,t])=>[i(t).join(","),e]))}export function CompileCommand(t){let i=t.split(" ");0===i.length&&n("No languages specified");let f=new Map;for(let e of i){let t=s(e);void 0===t&&n(`Unsupported language: ${e}`),f.set(e,t)}let u=new Map;for(let[t,o]of f.entries())e(`./${t}/entries.json`)||n(`No entries.json found in ${t}`),u.set(o,new Map(l(t).map(e=>[r(e),[e.source,e.translation]])));process.stdout.write("Preparing publishables... ");let c=[],p=l(i.at(0)),d=new Set;for(let[e,t]of p.entries()){let o=r(t),n=new Map,s=new Map;for(let e of f.values()){let t=u.get(e);if(void 0===t)continue;let[r,i]=t.get(o);n.has(r)?n.get(r).push(e):n.set(r,[e]),s.has(i)?s.get(i).push(e):s.set(i,[e])}let i={index:e+1,resource:t.resource,reference:t.reference,...void 0!==t.context&&{context:t.context},sourceIndex:t.sourceIndex,...void 0!==t.translationIndex&&t.translationIndex.length>0&&{translationIndex:t.translationIndex},sources:a(n),translations:a(s)};for(let e of(c.push(i),Object.values(i.sources)))for(let t of e)d.add(t);for(let e of Object.values(i.translations))for(let t of e)d.add(t)}o("./publishable.json",JSON.stringify(c,null,2)),o("./letters.txt",[...d].map(e=>e.codePointAt(0)).sort((e,t)=>e-t).join(",")),process.stdout.write("OK")}