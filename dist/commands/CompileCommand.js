import{existsSync as e,readFileSync as t,writeFileSync as r}from"node:fs";import{Entries as o,EntryText as s}from"@triforce-heroes/triforce-commands";import{fatal as n}from"@triforce-heroes/triforce-core/Console";import{secureHash as i}from"@triforce-heroes/triforce-core/Hash";import a from"chalk";import l from"p-queue";import{loadEngineDriver as f}from"../drivers/index.js";import{commandDrivers as u,DropCommandDriver as c}from"../types/CommandDriver.js";import{getEntryKey as d}from"../utils/entry.js";import{translate as p}from"../utils/google.js";import{guessLocale as m,simplifyLocales as g,weakLocales as h}from"../utils/locale.js";import{printProgress as v}from"../utils/progress.js";import{delay as w}from"../utils/utils.js";function j(r){return e(`./${r}/entries_default.json`)?JSON.parse(t(`./${r}/entries_default.json`,"utf8")):e(`./entries_${r}.json`)?JSON.parse(t(`./entries_${r}.json`,"utf8")):void n(`No entries.json found in ${r}`)}function x(e){return Object.fromEntries([...e.entries()].map(([e,t])=>[g(t).join(","),e]))}function I(e){return[...e.matchAll(/<(?<command>\d+)>/g)].map(e=>Number(e.groups.command))}let y=[[", or "," or "],[", and "," and "]];export async function CompileCommand(g,C,N){let O=f(g);void 0===O&&n(`Unsupported engine driver: ${g}`);let S=C.split(" ");if(0===S.length&&n("No languages specified"),N?.translate!==void 0)for(let e of S)void 0===m(e)&&n(`Invalid source language: ${N.translate}`);let $=new Map;for(let e of S){let t=m(e);void 0===t&&n(`Unsupported language: ${e}`),$.set(e,t)}let b=new Map;for(let[i,f]of $.entries()){let m=j(i);if(N?.translate===void 0)b.set(f,new Map(m.map(e=>[d(e),[e.source]])));else{let g,j;process.stdout.write(`Translating from ${i} as ${f}...

`);let x=`./cached-translations.${f}.json`,C=new Map(e(x)?JSON.parse(t(x,"utf8")):[]),S=0,$=setInterval(()=>{g!==j&&(j=g,v(S,m.length,j))},1e3);function T(){process.stdout.write(a.greenBright("  CACHE SAVED\n\n")),r(x,JSON.stringify([...C.entries()],null,2))}let J=setInterval(T,6e4);v(0,m.length);let M=new l({concurrency:N.concurrences});for(let e of m)M.add(async()=>{let t=new o(O.parse(e.source).entries.map(e=>{if(e instanceof s){let{text:t}=e;for(let[e,r]of y)t=t.replaceAll(e,r);return new s(t)}return e})),r=t.toCompressed(),i=r.toCompressed(),a=i.toText(),l=null;if(C.has(a))l=C.get(a);else{let e=I(a);e:for(let t=0;t<3;t++)for(let r of u){if(l=null,r instanceof c)break e;try{l=await p(f,N.translate,r.toTranslator(a),N.cookieId)}catch(e){"Too Many Requests"===e.message&&n("Too many requests: requires --cookie-id"),await w(1e3*t);continue e}if(e.length>0&&JSON.stringify(e)!==JSON.stringify(I(r.fromTranslator(l)))){if(h.includes(f)){l=null;break e}continue}if(!(l=r.fromTranslator(l)).includes("><")){C.set(a,l);break e}}}S++,e.translation=r.fromCompressed(i.fromCompressed(l??"",r),t),e.translationIndex=O.parse(e.translation).toIndex(),g={from:t.toIndex(),to:e.translationIndex}});await M.onIdle(),clearInterval(J),T(),clearInterval($),v(m.length,m.length),b.set(i,new Map(m.map(e=>[d(e),[e.source,e.translation,e.translationIndex]])))}}process.stdout.write("Preparing publishables... ");let J=[],M=j(S.at(0)),k=new Set;for(let e of M.values()){let t=d(e),r=new Map,o=new Map;for(let[e,s]of $.entries()){let n=b.get(e);if(n?.has(t)!==!0)continue;let[i,a]=n.get(t);if(r.has(i))r.get(i).push(e);else if(r.set(i,[e]),N?.letters===!0&&!h.includes(s))for(let e of O.parse(i).toCompressed().toText())k.add(e.codePointAt(0));if(N?.translate!==void 0){if(o.has(a))o.get(a).push(e);else if(o.set(a,[e]),!0===N.letters)for(let e of O.parse(a).toCompressed().toText())k.add(e.codePointAt(0))}}let s=b.get(S.at(0))?.get(t)?.[2],n={index:await i(Buffer.from(t)),resource:e.resource,reference:e.reference,...void 0!==e.context&&{context:e.context},sourceIndex:e.sourceIndex,...N?.translate!==void 0&&void 0!==s&&{translationIndex:s},sources:x(r),...N?.translate!==void 0&&{translations:x(o)}};J.push(n)}if(N?.uniques===!0){let e=new Set;for(let t of J)for(let r of Object.values(t.sources))e.add(r);r("./uniques.json",JSON.stringify([...e],null,2))}N?.letters===!0&&r("./letters.txt",[...k].sort((e,t)=>e-t).join(",")),r("./publishable.json",JSON.stringify(J,null,2)),process.stdout.write("OK")}