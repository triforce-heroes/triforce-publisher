import{existsSync as e,readFileSync as t,writeFileSync as r}from"node:fs";import{fatal as o}from"@triforce-heroes/triforce-core/Console";import{supportedLanguages as n,translate as s}from"@triforce-heroes/triforce-core/Translator";import a from"p-queue";import{loadEngineDriver as l}from"../drivers/index.js";import{getEntryKey as i}from"../utils/entry.js";import{guessLocale as f,simplifyLocales as u}from"../utils/locale.js";import{printProgress as d}from"../utils/progress.js";function p(r){return e(`./${r}/entries_default.json`)?JSON.parse(t(`./${r}/entries_default.json`,"utf8")):e(`./entries_${r}.json`)?JSON.parse(t(`./entries_${r}.json`,"utf8")):void o(`No entries.json found in ${r}`)}function c(e){return Object.fromEntries([...e.entries()].map(([e,t])=>[u(t).join(","),e]))}export async function CompileCommand(e,t,u){let m=l(e);void 0===m&&o(`Unsupported engine driver: ${e}`);let g=t.split(" ");0===g.length&&o("No languages specified"),u?.translate===void 0||n.includes(u.translate)||o(`Invalid source language: ${u.translate}`);let v=new Map;for(let e of g){let t=f(e);void 0===t&&o(`Unsupported language: ${e}`),v.set(e,t)}let h=new Map;for await(let[e,t]of v.entries()){let r=p(e);if(u?.translate===void 0)h.set(t,new Map(r.map(e=>[i(e),[e.source]])));else{let o,n;process.stdout.write(`Translating from ${e}...

`);let l=new Map,f=0,p=setInterval(()=>{o!==n&&(n=o,d(f,r.length,n))},1e3);d(0,r.length);let c=new a({concurrency:8});for(let e of r)c.add(async()=>{let r=m.parse(e.source),n=r.toCompressed(),a=n.toText(),i=null;if(l.has(a))i=l.get(a);else for(let e=0;e<10;e++)try{i=await s("http://127.0.0.1:7900",t,u.translate,a,!0,!!u.translateRetry),l.set(a,i);break}catch{}f++,e.translation=n.fromCompressed(i??"",r),e.translationIndex=m.parse(e.translation).toIndex(),o={from:r.toIndex(),to:e.translationIndex}});await c.onIdle(),clearInterval(p),d(r.length,r.length),h.set(t,new Map(r.map(e=>[i(e),[e.source,e.translation,e.translationIndex]])))}}process.stdout.write("Preparing publishables... ");let j=[];for(let[e,t]of p(g.at(0)).entries()){let r=i(t),o=new Map,n=new Map;for(let e of v.values()){let t=h.get(e);if(void 0===t)continue;let[s,a]=t.get(r);o.has(s)?o.get(s).push(e):o.set(s,[e]),u?.translate!==void 0&&(n.has(a)?n.get(a).push(e):n.set(a,[e]))}let s=h.get(g.at(0))?.get(r)?.[2],a={index:e+1,resource:t.resource,reference:t.reference,...void 0!==t.context&&{context:t.context},sourceIndex:t.sourceIndex,...u?.translate!==void 0&&void 0!==s&&{translationIndex:s},sources:c(o),...u?.translate!==void 0&&{translations:c(n)}};j.push(a)}if(u?.uniques){let e=new Set;for(let t of j)for(let r of Object.values(t.sources))e.add(r);r("./uniques.json",JSON.stringify([...e],null,2))}if(u?.letters){let e=new Set;for(let t of j)for(let r of Object.values(t.sources))for(let t of r)e.add(t);r("./letters.txt",[...e].map(e=>e.codePointAt(0)).sort((e,t)=>e-t).join(","))}r("./publishable.json",JSON.stringify(j,null,2)),process.stdout.write("OK")}